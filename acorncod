'use client'

import { useState, useEffect, useCallback } from 'react'
import Link from 'next/link'
import Image from 'next/image'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ArrowRight, Sun, Moon, DollarSign, Briefcase, Calculator, Check, Edit, RefreshCw } from 'lucide-react'

interface Content {
  heroSection: {
    title: string
    description: string
  }
  aboutSection: {
    content: string
  }
  features: { title: string; content: string; icon: string }[]
  news: {
    marketUpdates: { title: string; date: string; content: string }[]
    investmentTips: { title: string; date: string; content: string }[]
    sideHustles: { title: string; date: string; content: string }[]
  }
}

export default function HomePage() {
  const [isEditing, setIsEditing] = useState(false)
  const [content, setContent] = useState<Content>({
    heroSection: { title: '', description: '' },
    aboutSection: { content: '' },
    features: [],
    news: {
      marketUpdates: [],
      investmentTips: [],
      sideHustles: []
    }
  })
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [theme, setTheme] = useState<'light' | 'dark'>('light')

  const fetchContent = useCallback(async () => {
    try {
      setIsLoading(true)
      setError(null)
      const response = await fetch('/api/content')
      if (!response.ok) {
        throw new Error('Failed to fetch content')
      }
      const data = await response.json()
      setContent(data)
    } catch (error) {
      setError('Error loading content. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }, [])

  useEffect(() => {
    fetchContent()
  }, [fetchContent])

  const updateContent = async () => {
    try {
      setIsLoading(true)
      setError(null)
      const response = await fetch('/api/content', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(content)
      })
      if (!response.ok) {
        throw new Error('Failed to update content')
      }
      setIsEditing(false)
    } catch (error) {
      setError('Error updating content. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const toggleEdit = () => {
    if (isEditing) {
      updateContent()
    } else {
      setIsEditing(true)
    }
  }

  const toggleTheme = () => {
    setTheme(prevTheme => (prevTheme === 'dark' ? 'light' : 'dark'))
  }

  const EditableText = ({ value, onChange, multiline = false }: { value: string; onChange: (val: string) => void; multiline?: boolean }) => {
    if (isEditing) {
      return multiline ? (
        <textarea
          value={value}
          onChange={(e) => onChange(e.target.value)}
          className="w-full p-2 border rounded bg-white text-green-800"
        />
      ) : (
        <input
          type="text"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          className="w-full p-2 border rounded bg-white text-green-800"
        />
      )
    }
    return multiline ? <p>{value}</p> : <span>{value}</span>
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-green-50">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-green-500"></div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-green-50">
        <p className="text-xl mb-4 text-green-800">{error}</p>
        <Button onClick={fetchContent} className="bg-green-500 text-white hover:bg-green-600">
          <RefreshCw className="mr-2 h-4 w-4" /> Retry
        </Button>
      </div>
    )
  }

  return (
    <div className={`min-h-screen bg-green-50 text-green-800 ${theme === 'dark' ? 'dark' : ''}`}>
      {/* Header */}
      <header className="sticky top-0 z-40 w-full border-b border-green-200 bg-green-100/95 backdrop-blur supports-[backdrop-filter]:bg-green-100/60">
        <div className="container flex h-16 items-center space-x-4 sm:justify-between sm:space-x-0">
          <div className="flex gap-6 md:gap-10">
            <Link href="/" className="flex items-center space-x-2">
              <Image src="/placeholder.svg?height=32&width=32" width={32} height={32} alt="Logo" />
              <span className="inline-block font-bold text-green-800">Acorn Affiliate</span>
            </Link>
            <nav className="hidden md:flex gap-6">
              <Link href="#about" className="flex items-center text-lg font-semibold text-green-700 transition-colors hover:text-green-900">
                About
              </Link>
              <Link href="#features" className="flex items-center text-lg font-semibold text-green-700 transition-colors hover:text-green-900">
                Features
              </Link>
              <Link href="#news" className="flex items-center text-lg font-semibold text-green-700 transition-colors hover:text-green-900">
                News
              </Link>
              <Link href="/blog" className="flex items-center text-lg font-semibold text-green-700 transition-colors hover:text-green-900">
                Blog
              </Link>
              <Link href="/calculator" className="flex items-center text-lg font-semibold text-green-700 transition-colors hover:text-green-900">
                Calculator
              </Link>
              <Link href="#contact" className="flex items-center text-lg font-semibold text-green-700 transition-colors hover:text-green-900">
                Contact
              </Link>
            </nav>
          </div>
          <div className="flex flex-1 items-center justify-end space-x-4">
            <nav className="flex items-center space-x-1">
              <Button variant="ghost" size="icon" onClick={toggleTheme} aria-label="Toggle theme" className="text-green-800 hover:text-green-900 hover:bg-green-200">
                <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
                <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
                <span className="sr-only">Toggle theme</span>
              </Button>
              <Button variant="ghost" size="icon" onClick={toggleEdit} aria-label="Toggle edit mode" className="text-green-800 hover:text-green-900 hover:bg-green-200">
                {isEditing ? <Check className="h-5 w-5" /> : <Edit className="h-5 w-5" />}
              </Button>
            </nav>
          </div>
        </div>
      </header>

      {/* Main Content */}
      {/* Omitted the rest of the content for brevity */}
    </div>
  )
}
